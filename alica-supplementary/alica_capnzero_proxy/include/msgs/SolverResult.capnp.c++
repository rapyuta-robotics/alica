// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: SolverResult.capnp

#include "SolverResult.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<57> b_d7b08d26bfa6cda2 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    162, 205, 166, 191,  38, 141, 176, 215,
     19,   0,   0,   0,   1,   0,   0,   0,
      2,  69, 242,  82, 198, 158, 221, 252,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   2,   1,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     83, 111, 108, 118, 101, 114,  82, 101,
    115, 117, 108, 116,  46,  99,  97, 112,
    110, 112,  58,  83, 111, 108, 118, 101,
    114,  82, 101, 115, 117, 108, 116,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     68,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     65,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     60,   0,   0,   0,   3,   0,   1,   0,
     88,   0,   0,   0,   2,   0,   1,   0,
    115, 101, 110, 100, 101, 114,  73, 100,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    118,  97, 114, 115,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     98, 204, 248,  42,  77, 105,  76, 151,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d7b08d26bfa6cda2 = b_d7b08d26bfa6cda2.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d7b08d26bfa6cda2[] = {
  &s_974c694d2af8cc62,
};
static const uint16_t m_d7b08d26bfa6cda2[] = {0, 1};
static const uint16_t i_d7b08d26bfa6cda2[] = {0, 1};
const ::capnp::_::RawSchema s_d7b08d26bfa6cda2 = {
  0xd7b08d26bfa6cda2, b_d7b08d26bfa6cda2.words, 57, d_d7b08d26bfa6cda2, m_d7b08d26bfa6cda2,
  1, 2, i_d7b08d26bfa6cda2, nullptr, nullptr, { &s_d7b08d26bfa6cda2, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<52> b_974c694d2af8cc62 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     98, 204, 248,  42,  77, 105,  76, 151,
     19,   0,   0,   0,   1,   0,   1,   0,
      2,  69, 242,  82, 198, 158, 221, 252,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 234,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     83, 111, 108, 118, 101, 114,  82, 101,
    115, 117, 108, 116,  46,  99,  97, 112,
    110, 112,  58,  83, 111, 108, 118, 101,
    114,  86,  97, 114,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     68,   0,   0,   0,   2,   0,   1,   0,
    105, 100,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    118,  97, 108, 117, 101,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_974c694d2af8cc62 = b_974c694d2af8cc62.words;
#if !CAPNP_LITE
static const uint16_t m_974c694d2af8cc62[] = {0, 1};
static const uint16_t i_974c694d2af8cc62[] = {0, 1};
const ::capnp::_::RawSchema s_974c694d2af8cc62 = {
  0x974c694d2af8cc62, b_974c694d2af8cc62.words, 52, nullptr, m_974c694d2af8cc62,
  0, 2, i_974c694d2af8cc62, nullptr, nullptr, { &s_974c694d2af8cc62, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================


// SolverResult
constexpr uint16_t SolverResult::_capnpPrivate::dataWordSize;
constexpr uint16_t SolverResult::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind SolverResult::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* SolverResult::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// SolverVar
constexpr uint16_t SolverVar::_capnpPrivate::dataWordSize;
constexpr uint16_t SolverVar::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind SolverVar::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* SolverVar::_capnpPrivate::schema;
#endif  // !CAPNP_LITE



