#include "BehaviourCreator.h"
#include "ConditionCreator.h"
#include "ConstraintCreator.h"
#include "CounterClass.h"
#include "SimpleSwitches.h"
#include "UtilityFunctionCreator.h"
#include <communication/AlicaRosCommunication.h>
#include <engine/AlicaEngine.h>
#include <engine/PlanBase.h>

#include <gtest/gtest.h>
#include <iostream>
#include <test_alica.h>
#include <thread>

using alicaAutogenerated::CounterClass;

class BackForthTest : public ::testing::Test
{
protected:
    supplementary::SystemConfig* sc;
    alica::AlicaEngine* ae;
    alica::BehaviourCreator* bc;
    alica::ConditionCreator* cc;
    alica::UtilityFunctionCreator* uc;
    alica::ConstraintCreator* crc;

    virtual void SetUp()
    {
        // determine the path to the test config
        ros::NodeHandle nh;
        std::string path;
        nh.param<std::string>("/rootPath", path, ".");

        // bring up the SystemConfig with the corresponding path
        sc = supplementary::SystemConfig::getInstance();
        sc->setRootPath(path);
        sc->setConfigPath(path + "/etc");
        sc->setHostname("nase");

        // setup the engine
        ae = new alica::AlicaEngine(new supplementary::AgentIDManager(new supplementary::AgentIDFactory()), "Roleset", "BackForth", true);
        bc = new alica::BehaviourCreator();
        cc = new alica::ConditionCreator();
        uc = new alica::UtilityFunctionCreator();
        crc = new alica::ConstraintCreator();
        ae->setAlicaClock(new alica::AlicaClock());
        ae->setCommunicator(new alicaRosProxy::AlicaRosCommunication(ae));
        CounterClass::called = 0;
        SimpleSwitches::reset();
    }

    virtual void TearDown()
    {
        ae->shutdown();
        sc->shutdown();
        delete ae->getCommunicator();
        delete cc;
        delete bc;
        delete uc;
        delete crc;
    }
};
/**
 * Tests if Behaviour with Constraints are called
 */
TEST_F(BackForthTest, testing)
{
    ASSERT_NO_SIGNAL

    ae->init(bc, cc, uc, crc);
    ASSERT_EQ(CounterClass::called, 0);
    ae->start();
    step(ae);

    std::this_thread::sleep_for(std::chrono::milliseconds(200));
    int curCount = CounterClass::called;
    ASSERT_GT(curCount, 0);
    ASSERT_EQ(ae->getPlanBase()->getRootNode()->getActiveState()->getId(), 1529456584983);

    SimpleSwitches::set(0, true);
    step(ae);
    std::this_thread::sleep_for(std::chrono::milliseconds(200));

    ASSERT_GT(CounterClass::called, curCount);
    curCount = CounterClass::called;
    ASSERT_EQ(ae->getPlanBase()->getRootNode()->getActiveState()->getId(), 1529456591410);

    SimpleSwitches::set(1, true);
    for (int i = 0; i < 10; ++i) {
        step(ae);
        ASSERT_GT(CounterClass::called, curCount);
        curCount = CounterClass::called;
    }
}
