#include <gtest/gtest.h>
#include <engine/AlicaEngine.h>
#include <engine/AlicaClock.h>
#include "engine/IAlicaCommunication.h"
#include "engine/model/State.h"
#include "engine/model/Behaviour.h"
#include "engine/PlanRepository.h"
#include "engine/BasicBehaviour.h"
#include "engine/BehaviourPool.h"
#include "engine/PlanBase.h"
#include <communication/AlicaRosCommunication.h>
#include "engine/DefaultUtilityFunction.h"
#include "engine/TeamObserver.h"
#include "engine/model/Plan.h"
#include "engine/model/RuntimeCondition.h"
#include "BehaviourCreator.h"
#include "ConditionCreator.h"
#include "ConstraintCreator.h"
#include "UtilityFunctionCreator.h"
#include "engine/Assignment.h"
#include "engine/collections/AssignmentCollection.h"
#include "engine/collections/StateCollection.h"
#include "Plans/Behaviour/Attack.h"
#include "Plans/Behaviour/MidFieldStandard.h"
#include "CounterClass.h"
#include <csignal>


// using namespace alicaAutogenerated;

class AlicaSimplePlan : public ::testing::Test {
protected:
    supplementary::SystemConfig* sc;
    alica::AlicaEngine* ae;
    alica::BehaviourCreator* bc;
    alica::ConditionCreator* cc;
    alica::UtilityFunctionCreator* uc;
    alica::ConstraintCreator* crc;

    static void signal_handler(int signal) { EXPECT_FALSE(signal); }
    
    virtual void SetUp() {
        std::signal(SIGSEGV, signal_handler);

        // determine the path to the test config
        ros::NodeHandle nh;
        std::string path;
        nh.param<std::string>("/rootPath", path, ".");

        // bring up the SystemConfig with the corresponding path
        sc = supplementary::SystemConfig::getInstance();
        sc->setRootPath(path);
        sc->setConfigPath(path + "/etc");
        sc->setHostname("nase");

        // setup the engine
        ae = new alica::AlicaEngine(new supplementary::AgentIDManager(new supplementary::AgentIDFactory()), "Roleset",
                "SimpleTestPlan", ".", false);
        bc = new alica::BehaviourCreator();
        cc = new alica::ConditionCreator();
        uc = new alica::UtilityFunctionCreator();
        crc = new alica::ConstraintCreator();
        ae->setAlicaClock(new alica::AlicaClock());
        ae->setCommunicator(new alicaRosProxy::AlicaRosCommunication(ae));
    }

    virtual void TearDown() {
        ae->shutdown();
        sc->shutdown();
        delete ae->getCommunicator();
        delete cc;
        delete bc;
        delete uc;
        delete crc;
    }
};
/**
 * Tests whether it is possible to run a behaviour in a primitive plan.
 */
TEST_F(AlicaSimplePlan, runBehaviourInSimplePlan) {
    EXPECT_TRUE(ae->init(bc, cc, uc, crc)) << "Unable to initialise the Alica Engine!";

    ae->start();

    AlicaTime sleepTime = AlicaTime::seconds(1);
    do {
        ae->getAlicaClock()->sleep(sleepTime);
    } while (ae->getPlanBase()->getRootNode() == nullptr);

    // Check whether RC can be called
    EXPECT_TRUE(ae->getPlanBase()->getRootNode()->evalRuntimeCondition());
    // Check wheter RC has been called

    //	BEFORE
    //	EXPECT_GE(((RunTimeCondition1412781693884*)&*ae->getPlanBase()->getRootNode()->getPlan()->getRuntimeCondition()->getBasicCondition())->called,
    // 1);

    EXPECT_GE(alicaAutogenerated::CounterClass::called, 1);
    // Check final state
    EXPECT_EQ(ae->getPlanBase()->getRootNode()->getActiveState()->getId(), 1412761855746);
    // Check execution of final state behaviour
    EXPECT_EQ((*ae->getPlanBase()->getRootNode()->getChildren()->begin())->getBasicBehaviour()->getName(),
            string("Attack"));
    // Assuming 30 Hz were 11 iterations are executed by MidFieldStandard, we expect at least 29*sleeptime-15 calls on
    // Attack
    EXPECT_GT(((alica::Attack*) &*(*ae->getPlanBase()->getRootNode()->getChildren()->begin())->getBasicBehaviour())
                      ->callCounter,
            (sleepTime.inSeconds()) *29 - 15);
    EXPECT_GT(((alica::Attack*) &*(*ae->getPlanBase()->getRootNode()->getChildren()->begin())->getBasicBehaviour())
                      ->initCounter,
            0);

    // Check whether we have been in state1 to execute midfield standard
    for (auto iter : ae->getBehaviourPool()->getAvailableBehaviours()) {
        if (iter.second->getName() == "MidFieldStandard") {
            EXPECT_GT(((alica::MidFieldStandard*) &*iter.second)->callCounter, 10);
        }
    }
    alicaAutogenerated::CounterClass::called = 0;
}
